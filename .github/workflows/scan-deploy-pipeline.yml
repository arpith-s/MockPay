name: 🛠️ Scan Deploy Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  JAVA_VERSION: 21
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-identity-service:
    name: 🏗️ Build and Analyze identity-service
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_IDENTITY_SERVICE }}
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🚀 Build and Analyze with Maven & SonarCloud
        run: |
          cd identity-service
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mockpay_identity-service

      - name: ✅ Check Quality Gate Status
        if: always()
        run: bash ./.github/scripts/check_quality_gate.sh "identity-service" "mockpay_identity-service" "${{ env.SONAR_TOKEN }}"

  build-wallet-service:
    name: 🏗️ Build and Analyze wallet-service
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_WALLET_SERVICE }}
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🚀 Build and Analyze with Maven & SonarCloud
        run: |
          cd wallet-service
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mockpay_wallet-service

      - name: ✅ Check Quality Gate Status
        if: always()
        run: bash ./.github/scripts/check_quality_gate.sh "wallet-service" "mockpay_wallet-service" "${{ env.SONAR_TOKEN }}"

  build-transaction-service:
    name: 🏗️ Build and Analyze transaction-service
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_TRANSACTION_SERVICE }}
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🚀 Build and Analyze with Maven & SonarCloud
        run: |
          cd transaction-service
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mockpay_transaction-service

      - name: ✅ Check Quality Gate Status
        if: always()
        run: bash ./.github/scripts/check_quality_gate.sh "transaction-service" "mockpay_transaction-service" "${{ env.SONAR_TOKEN }}"

  build-notification-service:
    name: 🏗️ Build and Analyze notification-service
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_NOTIFICATION_SERVICE }}
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ hashFiles('**/*') }}
          restore-keys: ${{ runner.os }}-sonar

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: 🚀 Build and Analyze with Maven & SonarCloud
        run: |
          cd notification-service
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mockpay_notification-service

      - name: ✅ Check Quality Gate Status
        if: always()
        run: bash ./.github/scripts/check_quality_gate.sh "notification-service" "mockpay_notification-service" "${{ env.SONAR_TOKEN }}"

  deploy-identity-service:
    name: 🚢 Deploy identity-service to Heroku
    needs: [ build-identity-service ]
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2

      - name: 🏗️ Build identity-service
        run: |
          cd identity-service
          mvn clean package -DskipTests

      - name: 🚀 Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "identity-service-mockpay"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "identity-service"

  deploy-wallet-service:
    name: 🚢 Deploy wallet-service to Heroku
    needs: [ build-wallet-service ]
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2

      - name: 🏗️ Build wallet-service
        run: |
          cd wallet-service
          mvn clean package -DskipTests

      - name: 🚀 Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "wallet-service-mockpay"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "wallet-service"

  deploy-transaction-service:
    name: 🚢 Deploy transaction-service to Heroku
    needs: [ build-transaction-service ]
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2

      - name: 🏗️ Build transaction-service
        run: |
          cd transaction-service
          mvn clean package -DskipTests

      - name: 🚀 Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "transaction-service-mockpay"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "transaction-service"

  deploy-notification-service:
    name: 🚢 Deploy notification-service to Heroku
    needs: [ build-notification-service ]
    runs-on: ubuntu-latest
    steps:
      - name: 🔍 Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ☕ Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: 📦 Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: m2

      - name: 🏗️ Build notification-service
        run: |
          cd notification-service
          mvn clean package -DskipTests

      - name: 🚀 Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "notification-service-mockpay"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "notification-service"